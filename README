xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern x86-based multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)). See also http://pdos.csail.mit.edu/6.828/2016/xv6.html, which
provides pointers to on-line resources for v6.

xv6 borrows code from the following sources:
    JOS (asm.h, elf.h, mmu.h, bootasm.S, ide.c, console.c, and others)
    Plan 9 (entryother.S, mp.h, mp.c, lapic.c)
    FreeBSD (ioapic.c)
    NetBSD (console.c)

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by Silas
Boyd-Wickizer, Anton Burtsev, Cody Cutler, Mike CAT, Tej Chajed, Nelson Elhage,
Saar Ettinger, Alice Ferrazzi, Nathaniel Filardo, Peter Froehlich, Yakir Goaron,
Shivam Handa, Bryan Henry, Jim Huang, Alexander Kapshuk, Anders Kaseorg,
kehao95, Wolfgang Keller, Eddie Kohler, Austin Liew, Imbar Marinescu, Yandong
Mao, Hitoshi Mitake, Carmi Merimovich, Joel Nider, Greg Price, Ayan Shafqat,
Eldar Sehayek, Yongming Shen, Cam Tenny, Rafael Ubal, Warren Toomey, Stephen Tu,
Pablo Ventura, Xi Wang, Keiichi Watanabe, Nicolas Wolovick, Grant Wu, Jindong
Zhang, Icenowy Zheng, and Zou Chang Wei.

The code in the files that constitute xv6 is
Copyright 2006-2016 Frans Kaashoek, Robert Morris, and Russ Cox.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu). The main purpose of xv6 is as a teaching
operating system for MIT's 6.828, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

To build xv6 on an x86 ELF machine (like Linux or FreeBSD), run
"make". On non-x86 or non-ELF machines (like OS X, even on x86), you
will need to install a cross-compiler gcc suite capable of producing
x86 ELF binaries. See http://pdos.csail.mit.edu/6.828/2016/tools.html.
Then run "make TOOLPREFIX=i386-jos-elf-". Now install the QEMU PC
simulator and run "make qemu".


Enhancements
    
B tree directory entries
    - Directory inodes use addrs[0] to refer to the root node in a
      B tree.

    B tree node

        - Block size (512 bytes)
        - Contains the number of directory entries in the node, a list
          of directory entries, a list of child blocks, a list of
          the total number of children per child, and a field
          designating whether or not the node is a leaf
        - The minimum degree of the B tree is 11 indicating that each
          node other than the root must have at least 10 and at most
          21 directory entries and at most 22 children.
        - To conserve stack space, nodes are cached in the same
          fashion as blocks
        - Nodes also follow a similar pardigm for allocating, reading,
          writing, releasing, and freeing as block do
        - The maximum number of characters in a directory entry has
          been increased to 16
        - Directory entries are stored and read in alphabetical order
     

    Algorithms
        - Inserting, deleting, and searching for a node
          are adopted from Chapter 18 of Introduction to Algorithms
          by Cormen, Leiserson, Rivest, and Stein
        - The algorithm for reading supports random access by using the
          total number of children per child, the start and end of the range
          of bytes requested by the caller, and the fact that a
          directory entry is the smallest unit that can be
          read/written to efficiently "guide" the read to the
          appropriate locations

    Design goals
        - A node can be read (and written) once per insert, delete,
          etc.
        - At most, height number of nodes can be cached at any one
    time

    Known issues
        - Since the directory entries are stored in alphabetical order
          (as opposed to a list), it's possible for directories to
          precede "." and ".." when reading all the diretories entries
          from a directory.
        - Directory inodes have unused addrs aside from addrs[0]

    Future enhancements
        - Use B+ trees instead of B trees
    
    
    
    
